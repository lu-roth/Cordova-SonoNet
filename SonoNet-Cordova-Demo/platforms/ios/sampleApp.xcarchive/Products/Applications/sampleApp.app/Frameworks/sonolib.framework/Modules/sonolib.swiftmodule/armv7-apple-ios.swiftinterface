// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name sonolib
import AVFoundation
import CoreBluetooth
import CoreData
import CoreLocation
import Foundation
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
@_exported import sonolib
@objc final public class SonoNetConfigBuilder : ObjectiveC.NSObject {
  final public var apiKey: Swift.String?
  final public var singleLocation: Swift.String?
  final public var contentView: sonolib.ContentView?
  final public var debugMode: Swift.Bool?
  final public var notifyMe: Swift.Bool?
  final public var preferredMic: Swift.Int?
  final public var hasMenu: Swift.Bool?
  public typealias BuilderClosure = (sonolib.SonoNetConfigBuilder) -> ()
  @objc public init(buildClosure: (sonolib.SonoNetConfigBuilder) -> ())
  @objc override dynamic public init()
  @objc deinit
}
extension UIColor {
  public enum customColors {
    case background
    case label
    case button
    case tint
    case tableHeader
    public static func == (a: UIKit.UIColor.customColors, b: UIKit.UIColor.customColors) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
@objc public class MenuItem : ObjectiveC.NSObject, Swift.Codable, sonolib.WebLink {
  @objc public var id: Swift.Int
  @objc public var url: Swift.String
  @objc public var title: Swift.String
  public var showAtLaunch: Swift.Bool?
  public init(id: Swift.Int? = 0, url: Swift.String, title: Swift.String, showAtLaunch: Swift.Bool? = false)
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class Geotification : ObjectiveC.NSObject, Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case identifier
    case message
    case title
    case type
    case coordinates
    case radius
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public enum GeoType : Swift.Int, Swift.Codable {
    case Geofence
    case BleBeacon
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public var type: sonolib.Geotification.GeoType
  public var radius: CoreLocation.CLLocationDistance
  public var coordinates: CoreLocation.CLLocationCoordinate2D
  public var identifier: Swift.String
  public var message: Swift.String
  public var title: Swift.String
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
extension Geotification {
  public class func allGeotifications() -> [sonolib.Geotification]
}
extension CLLocationCoordinate2D : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public protocol WebLink {
  @objc var id: Swift.Int { get }
  @objc var url: Swift.String { get }
  @objc var title: Swift.String { get }
}
@objc public protocol Notifier {
  @objc var identifier: Swift.String { get }
  @objc var message: Swift.String { get }
  @objc var title: Swift.String? { get }
}
@objc public class ContentView : UIKit.UIView {
  public var webLink: sonolib.WebLink? {
    get
    set(newValue)
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public class var requiresConstraintBasedLayout: Swift.Bool {
    @objc get
  }
  @objc deinit
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
extension ContentView : WebKit.WKNavigationDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
}
extension ContentView : WebKit.WKUIDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptTextInputPanelWithPrompt prompt: Swift.String, defaultText: Swift.String?, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.String?) -> Swift.Void)
}
extension ContentView : WebKit.WKScriptMessageHandler {
  @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension ContentView : UIKit.UIScrollViewDelegate {
  @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
}
@objc public class SonoNetConfig : ObjectiveC.NSObject {
  @objc public init?(_ config: sonolib.SonoNetConfigBuilder)
  @objc override dynamic public init()
  @objc deinit
}
@objc(SonoNet) final public class SonoNet : ObjectiveC.NSObject {
  @objc public static var shared: sonolib.SonoNet
  @objc final public var didReceiveBeaconId: ((Swift.Int) -> ())?
  @objc final public var didReceiveContent: ((sonolib.WebLink) -> ())?
  @objc final public var whenBluetoothDisabled: (() -> ())?
  @objc final public var isUpdateAvailable: (() -> ())?
  @objc final public var geotificationToMonitor: ((sonolib.Geotification) -> ())?
  @objc final public func bind(withConfig config: sonolib.SonoNetConfig)
  @objc final public func unbind()
  @objc final public func sendNotification(withIdentifier identifier: Swift.String)
  @objc deinit
}
extension UIView {
  public func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = ToastManager.shared.duration, position: sonolib.ToastPosition = ToastManager.shared.position, title: Swift.String? = nil, image: UIKit.UIImage? = nil, style: sonolib.ToastStyle = ToastManager.shared.style, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = ToastManager.shared.duration, point: CoreGraphics.CGPoint, title: Swift.String?, image: UIKit.UIImage?, style: sonolib.ToastStyle = ToastManager.shared.style, completion: ((Swift.Bool) -> Swift.Void)?)
  public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval = ToastManager.shared.duration, position: sonolib.ToastPosition = ToastManager.shared.position, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval = ToastManager.shared.duration, point: CoreGraphics.CGPoint, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func hideToast()
  public func hideToast(_ toast: UIKit.UIView)
  public func hideAllToasts(includeActivity: Swift.Bool = false, clearQueue: Swift.Bool = true)
  public func clearToastQueue()
  public func makeToastActivity(_ position: sonolib.ToastPosition)
  public func makeToastActivity(_ point: CoreGraphics.CGPoint)
  public func hideToastActivity()
  public func toastViewForMessage(_ message: Swift.String?, title: Swift.String?, image: UIKit.UIImage?, style: sonolib.ToastStyle) throws -> UIKit.UIView
}
public struct ToastStyle {
  public init()
  public var backgroundColor: UIKit.UIColor
  public var titleColor: UIKit.UIColor
  public var messageColor: UIKit.UIColor
  public var maxWidthPercentage: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
  public var maxHeightPercentage: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
  public var horizontalPadding: CoreGraphics.CGFloat
  public var verticalPadding: CoreGraphics.CGFloat
  public var cornerRadius: CoreGraphics.CGFloat
  public var titleFont: UIKit.UIFont
  public var messageFont: UIKit.UIFont
  public var titleAlignment: UIKit.NSTextAlignment
  public var messageAlignment: UIKit.NSTextAlignment
  public var titleNumberOfLines: Swift.Int
  public var messageNumberOfLines: Swift.Int
  public var displayShadow: Swift.Bool
  public var shadowColor: UIKit.UIColor
  public var shadowOpacity: Swift.Float {
    get
    set(newValue)
  }
  public var shadowRadius: CoreGraphics.CGFloat
  public var shadowOffset: CoreGraphics.CGSize
  public var imageSize: CoreGraphics.CGSize
  public var activitySize: CoreGraphics.CGSize
  public var fadeDuration: Foundation.TimeInterval
  public var activityIndicatorColor: UIKit.UIColor
  public var activityBackgroundColor: UIKit.UIColor
}
public class ToastManager {
  public static var shared: sonolib.ToastManager
  public var style: sonolib.ToastStyle
  public var isTapToDismissEnabled: Swift.Bool
  public var isQueueEnabled: Swift.Bool
  public var duration: Foundation.TimeInterval
  public var position: sonolib.ToastPosition
  @objc deinit
}
public enum ToastPosition {
  case top
  case center
  case bottom
  public static func == (a: sonolib.ToastPosition, b: sonolib.ToastPosition) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public class Environment {
  @objc deinit
}
